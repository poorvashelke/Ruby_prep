#--------------------------------------------------------------------------------------------
# maximum rectangular area of histogram
# 84. Largest Rectangle in Histogram

# def largest_rectangle_area(heights)
#     max_area = area = 0
#     stack = []
#     (0...heights.size).each do |i|
#        if stack.empty? || heights[stack.last] <= heights[i]
#            stack.push(i)
#        else
#            top_idx = stack.pop
#            # p "top : #{top_idx}| i : #{i}"
#            if stack.empty?
#                area = heights[top_idx] * i
#            else
#                area = heights[top_idx] * ( i - stack.last - 1)
#            end
#            max_area = area if max_area < area
#        end
#     end
#     i = heights.size
#     p stack
#     until stack.empty?
#         top = stack.pop
#         if stack.empty?
#             area = heights[top] * i
#         else
#             area = heights[top] * (i - stack.last - 1)
#         end
#         p max_area = area if max_area < area
#     end
#     max_area
# end

def largest_rectangle_area(heights)
    # return heights.first if heights.size == 1  
    heights << 0
    stack, ans = [], 0
    (0...heights.size).each do |i|
        while !stack.empty? && heights[stack[-1]] > heights[i]
            ans = [heights[stack.pop] * (stack.empty? ? i : (i-stack.last-1)), ans].max
        end
        stack << i
    end
    ans
end#--------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------
